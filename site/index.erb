      
    <h1>Finally: a standard format for speedramps</h1>
    
    <p>A framecurve is a type of animation curve that represents a variable-speed timewarp. That is, a timewarp where footage accelerates
      and slows down. It's called a <b>frame curve</b> because instead of operating with changing <b>speed</b> values it operates in absolute
      <b>frame correlations</b> - it gives you a table of relationships from the <b>frame in your scene</b> to a <b>frame in your animation or video.</b>
    </p>
    
    <h1>A taster (with visuals!)</h1> 
    <p>Here's a small demo how some framecurves would look in your animation channels editor. On the X axis is the <b>at_frame</b> (your timebar). On the Y axis - <b>use_frame_of_source</b> the frames you
      are sampling from the original animation or video stream. If you ever used a retiming plugin you probably recognize that.
    </p> 
 
    <div id="placeholder" style="width:100%;height:300px"></div> 
  
    <p>Makes sense? Before you ask, for framecurves we explicitly <b>never use</b> spline interpolations, even though they would give
      a smoother curve - that because <i>every animation package interpolates curves differently</i> and we cannot reverse-engineer
      every possible channel editor in existence today.</p>
      
    <h1>What we offer</h1>
    
    <p>A concrete, <a href="specification-v1.html">documented</a>, 
machine- and human-readable format for outputting a framecurve, and a set of scripts for today's most popular animation and compositing packages for applying that curve to animation data.</p>
    
    <h2>How does it look?</h2>
    
    <p>Extremely simple. Here is a framecurve:</p>

<code><pre>
# http://framecurve.org/specification-v1.html
# at_frame use_frame_of_source
1	1.00000
25	25.00000
50	70.54323
125	125.00000
</pre></code>
    
    <p>Store that to a file and use any of our scripts to apply it to your objects.</p>
    
<script type="text/javascript"> 
$(function () {
    var d0 = [
      [1,1], [160, 160]
    ];
    
    var d1 = [];
    d1.push([1, 1]);
    d1.push([160, 320]);
    
    var d2 = [];
    d2.push([1, 1]);
    d2.push([20, 20]);
    d2.push([30, 26.1]);
    d2.push([40, 28]);
    d2.push([60, 28.8]);
    d2.push([65, 29]);
    d2.push([70, 29.5]);
    d2.push([80, 31.5]);
    d2.push([90, 34]);
    d2.push([95, 37]);
    d2.push([100, 42.5]);
    d2.push([105, 52.5]);
    d2.push([110, 64.5]);
    d2.push([115, 80]);
    d2.push([120, 102]);
    d2.push([160, 320]);
    
    var d3 = [];
    d3.push([1, 1]);
    d3.push([80, 230]);
    d3.push([85, 241]);
    d3.push([90, 250]);
    d3.push([95, 258]);
    d3.push([100, 265]);
    d3.push([160, 320]);
    
function plott() {
    $.plot($("#placeholder"), [
        { label: "160 frames - original speed",  data: d0},
        { label: "320 frames - speed 200%",  data: d1},
        { label: "320 frames clip - slowdown in the middle",  data: d2},
        { label: "320 frames clip - slowly comes to a stop",  data: d3},
    ], {
        series: {
            lines: { show: true },
            points: { show: true }
        },
        xaxis: {
            ticks: 10,
            max: 160,
            label: "at_frame"
        },
        yaxis: {
            ticks: 10,
            min: 1,
            max: 320,
            label: "use_frame_of_source"
        },
        legend: { 
            position: "nw"
        },
        grid: {
            backgroundColor: { colors: ["#fff", "#eee"] }
        }
    });
}
plott();
window.onresize = plott;
});
</script> 